{
  "fundamental_1":{
    "title":"Given:  \n  \n`console.log(myNum);`  \n  \n`var myNum;`  \n  \n`myNum = 5`   \n  \n what value is logged?",
    "labels":[
      {"title":"`5`", "qid":"3001"},
      {"title":"A reference error is thrown because variable is used before it's been declared.", "qid":"3002"},
      {"title":"`undefined` because in js declarations are hoisted.", "qid":"3003"},
      {"title":"None of the above.", "qid":"3004"}
    ],
    "actual":"3003",
    "category":"quiz",
    "criterion":"hoisting",
    "type":"radio"
  },
  "fundamental_2":{
    "title":"Given:  \n  \n`console.log(myNum);`  \n  \n`myNum = 5`  \n  \n what value is logged?",
    "labels":[
      {"title":"A reference error is thrown because the variable is used without being declared. JS hoists declarations only.", "qid":"3005"},
      {"title":"`undefined` because in js initializations and declarations are hoisted.", "qid":"3006"},
      {"title":"5", "qid":"3007"},
      {"title":"None of the above.", "qid":"3008"}
    ],
    "actual":"3005",
    "category":"quiz",
    "criterion":"hoisting",
    "type":"radio"
  },
  "fundamental_3":{
    "title":"Given:  \n  \n`console.log(myNum);`  \n  \n`if(1) {`  \n&emsp;`let myNum = 5`  \n  \n `}`  \n  \n  what value is logged?",
    "labels":[
      {"title":"5", "qid":"3009", "topics":["scope"]},
      {"title":"`Uncaught ReferenceError` because let is block scoped and so not hoisted outside the conditional.", "qid":"3010"},
      {"title":"`undefined` because in js initializations and declarations are hoisted.", "qid":"3011", "topics":["scope"]}
    ],
    "actual":"3010",
    "category":"quiz",
    "criterion":"hoisting",
    "type":"radio"
  },
  "fundamental_4":{
    "title":"Which of the following are exclusively primitive *data types*?",
    "labels":[
      {"title":"`number`, `bigint`, `boolean`, `undefined`, `null`", "qid":"3012"},
      {"title":"`string`, `number`, `bigint`, `boolean`, `undefined`, `symbol`", "qid":"3013"},
      {"title":"`Object`, `Array`, `Map`, `Set`, `Function`, `Date`", "qid":"3014", "topics":["primitive_types"]},
      {"title":"`Object`, `Array`, `Map`, `Set`, `boolean`, `undefined`", "qid":"3015", "topics":["primitive_types"]}
    ],
    "actual":"3013",
    "category":"quiz",
    "criterion":"primitives",
    "type":"radio"
  },
  "fundamental_5":{
    "title":"What is the difference between `string` and `String`, `boolean` and `Boolean`, `symbol` and `Symbol` etc. ?",
    "labels":[
      {"title":"The lowercase version is a primitive data type with no methods while the uppercase version is a wrapper object with methods.", "qid":"3016"},
      {"title":"There is no difference. Both can be used interchangeably.", "qid":"3017", "topics":["primitive_types"], "next":"fundamental_4"},
      {"title":"The lowercase version is the value assigned by the uppercase version.", "qid":"3018", "topics":["primitive_types"], "next":"fundamental_4"},
      {"title":"None of the above.", "qid":"3019", "next":"fundamental_4"}
    ],
    "actual":"3016",
    "category":"quiz",
    "criterion":"primitives",
    "type":"radio"
  },
  "fundamental_6":{
    "title":"Given `let a = true;` and `let b = new Boolean(true);`  \n  \nWhat will `typeof a` and `typeof b` return?",
    "labels":[
      {"title":"Both will return the string `boolean` since both pass in a boolean argument.", "qid":"3020", "topics":["primitive_types"]},
      {"title":"Both will return the string `object`", "qid":"3021"},
      {"title":"`boolean` and `object` respectively because the first is a primative value and the second is an instance of the Boolean constructor.", "qid":"3022"},
      {"title":"`object` and `boolean` respectively because `new Boolean()` always returns a primitive value.", "qid":"3023"}
    ],
    "actual":"3022",
    "category":"quiz",
    "criterion":"primitives",
    "type":"radio"
  },
  "symbol_1":{
    "title":"What is the benefit of using the Symbol type?",
    "labels":[
      {"title":"Holds key-value pairs and remembers the original insertion order of the keys. ", "qid":"6001","topics":["intent"]},
      {"title":"Stores unique values of any type, whether primitive values or object references.", "qid":"6002","topics":["intent"]},
      {"title":"Creates a new unique value when called. They can used in place of strings or numbers meant to be unique in a system.", "qid":"6003"},
      {"title":"Represents the eventual completion (or failure) of an asynchronous operation and its resulting value.", "qid":"6004","topics":["intent"]}
    ],
    "actual":"6003",
    "category":"quiz",
    "criterion":"benefit",
    "type":"radio"
  },
  "symbol_2":{
    "title":"What is the correct syntax to create a new `Symbol`?",
    "labels":[
      {"title":"`const s = new Symbol()` initialize an instance with the `new` keyword.", "qid":"6005","topics":["syntax"]},
      {"title":"`const s = Symbol('Sym1')` the `new` keyword is purposely not supported for JS Symbols.", "qid":"6006"},
      {"title":"`const s = Symbol.add('Sym1')` which adds a new Symbol to the global registry.", "qid":"6007", "topics":["syntax"]},
      {"title":"`const s = Symbol.create('Sym1')` which creates a new Symbol", "qid":"6008", "topics":["syntax"]}
    ],
    "actual":"6006",
    "category":"quiz",
    "criterion":"instantiation",
    "type":"radio"
  },
  "symbol_3":{
    "title":"Given: `const s = Symbol('hello')`\n  \n How would you access the Symbols descriptive string 'hello'?",
    "labels":[
      {"title":"`Symbol.get('description')`", "qid":"6009", "topics":["syntax"]},
      {"title":"`s.description`", "qid":"6010"},
      {"title":"`s.description()`", "qid":"6011", "topics":["syntax"]}
    ],
    "actual":"6010",
    "category":"quiz",
    "criterion":"description",
    "type":"radio"
  },
  "quiz_results":{
    "title":"JS Quiz Summary",
    "type":"summary",
    "qid":"10000"
  }

}
