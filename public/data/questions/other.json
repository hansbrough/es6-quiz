{
  "fundamental_1":{
    "title":"Given:  \n  \n`console.log(myNum);`  \n  \n`var myNum;`  \n  \n`myNum = 5`   \n  \n what value is logged?",
    "labels":[
      {"title":"`5`", "qid":"3001"},
      {"title":"A reference error is thrown because variable is used before it's been declared.", "qid":"3002"},
      {"title":"`undefined` because in js declarations are hoisted.", "qid":"3003"},
      {"title":"None of the above.", "qid":"3004"}
    ],
    "actual":"3003",
    "category":"quiz",
    "criterion":"hoisting",
    "type":"radio"
  },
  "fundamental_2":{
    "title":"Given:  \n  \n`console.log(myNum);`  \n  \n`myNum = 5`  \n  \n what value is logged?",
    "labels":[
      {"title":"A reference error is thrown because the variable is used without being declared. JS hoists declarations only.", "qid":"3005"},
      {"title":"`undefined` because in js initializations and declarations are hoisted.", "qid":"3006"},
      {"title":"5", "qid":"3007"},
      {"title":"None of the above.", "qid":"3008"}
    ],
    "actual":"3005",
    "category":"quiz",
    "criterion":"hoisting",
    "type":"radio"
  },
  "fundamental_3":{
    "title":"Given:  \n  \n`console.log(myNum);`  \n  \n`if(1) {`  \n&emsp;`let myNum = 5`  \n  \n `}`  \n  \n  what value is logged?",
    "labels":[
      {"title":"5", "qid":"3009", "topics":["scope"]},
      {"title":"`Uncaught ReferenceError` because let is block scoped and so not hoisted outside the conditional.", "qid":"3010"},
      {"title":"`undefined` because in js initializations and declarations are hoisted.", "qid":"3011", "topics":["scope"]}
    ],
    "actual":"3010",
    "category":"quiz",
    "criterion":"hoisting",
    "type":"radio"
  },
  "fundamental_4":{
    "title":"Which of the following are exclusively primitive *data types*?",
    "labels":[
      {"title":"`number`, `bigint`, `boolean`, `undefined`, `null`", "qid":"3012"},
      {"title":"`string`, `number`, `bigint`, `boolean`, `undefined`, `symbol`", "qid":"3013"},
      {"title":"`Object`, `Array`, `Map`, `Set`, `Function`, `Date`", "qid":"3014", "topics":["primitive_types"]},
      {"title":"`Object`, `Array`, `Map`, `Set`, `boolean`, `undefined`", "qid":"3015", "topics":["primitive_types"]}
    ],
    "actual":"3013",
    "category":"quiz",
    "criterion":"primitives",
    "type":"radio"
  },
  "fundamental_5":{
    "title":"What is the difference between `string` and `String`, `boolean` and `Boolean`, `symbol` and `Symbol` etc. ?",
    "labels":[
      {"title":"The lowercase version is a primitive data type with no methods while the uppercase version is a wrapper object with methods.", "qid":"3016"},
      {"title":"There is no difference. Both can be used interchangeably.", "qid":"3017", "topics":["primitive_types"], "next":"fundamental_4"},
      {"title":"The lowercase version is the value assigned by the uppercase version.", "qid":"3018", "topics":["primitive_types"], "next":"fundamental_4"},
      {"title":"None of the above.", "qid":"3019", "next":"fundamental_4"}
    ],
    "actual":"3016",
    "category":"quiz",
    "criterion":"primitives",
    "type":"radio"
  },
  "fundamental_6":{
    "title":"Given `let a = true;` and `let b = new Boolean(true);`  \n  \nWhat will `typeof a` and `typeof b` return?",
    "labels":[
      {"title":"Both will return the string `boolean` since both pass in a boolean argument.", "qid":"3020", "topics":["primitive_types"]},
      {"title":"Both will return the string `object`", "qid":"3021"},
      {"title":"`boolean` and `object` respectively because the first is a primative value and the second is an instance of the Boolean constructor.", "qid":"3022"},
      {"title":"`object` and `boolean` respectively because `new Boolean()` always returns a primitive value.", "qid":"3023"}
    ],
    "actual":"3022",
    "category":"quiz",
    "criterion":"primitives",
    "type":"radio"
  },
  "fundamental_7":{
    "title":"Given:  \n  \n`if(1) {`  \n  \n&emsp;`console.log(myNum)`  \n  \n&emsp;`let myNum = 5`  \n  \n `}`  \n  \n  what value is logged?",
    "labels":[
      {"title":"5", "qid":"3024", "topics":["hoisting"]},
      {"title":"`Uncaught ReferenceError: Cannot access ... before initialization.` because `let` and `const` require 'declation' and 'initialization' before becoming available for use (unlike when using the `var` keyword.).", "qid":"3025"},
      {"title":"`undefined` because in js initializations and declarations are hoisted.", "qid":"3026", "topics":["hoisting"]}
    ],
    "actual":"3025",
    "category":"quiz",
    "criterion":"hoisting",
    "type":"radio"
  },
  "fundamental_8":{
    "title":"Given:  \n  \n`var x = 1;`  \n  \n`var x = 2;`  \n  \n `let x = 3;`  \n  \n  what value is logged?",
    "labels":[
      {"title":"`3` because it is the last value assigned to `x` by the `let` statement.", "qid":"3027", "topics":["declaration"]},
      {"title":"`Uncaught SyntaxError: Identifier 'x' has already been declared` because the `let` keyword does not allow redeclaration.", "qid":"3028"},
      {"title":"`Uncaught SyntaxError: Identifier 'x' has already been declared` because the `var` keyword does not allow redeclaration.", "qid":"3029", "topics":["declaration"]},
      {"title":"`undefined` because redeclaration in js is not allowed.", "qid":"3030", "topics":["declaration"]}
    ],
    "actual":"3028",
    "category":"quiz",
    "criterion":"redeclaration",
    "type":"radio"
  },
  "symbol_1":{
    "title":"What is the benefit of using the Symbol type?",
    "labels":[
      {"title":"Holds key-value pairs and remembers the original insertion order of the keys. ", "qid":"6001","topics":["intent"]},
      {"title":"Stores unique values of any type, whether primitive values or object references.", "qid":"6002","topics":["intent"]},
      {"title":"Creates a new unique value when called. They can used in place of strings or numbers meant to be unique in a system.", "qid":"6003"},
      {"title":"Represents the eventual completion (or failure) of an asynchronous operation and its resulting value.", "qid":"6004","topics":["intent"]}
    ],
    "actual":"6003",
    "category":"quiz",
    "criterion":"benefit",
    "type":"radio"
  },
  "symbol_2":{
    "title":"What is the correct syntax to create a new `Symbol`?",
    "labels":[
      {"title":"`const s = new Symbol()` initialize an instance with the `new` keyword.", "qid":"6005","topics":["syntax"]},
      {"title":"`const s = Symbol('Sym1')` the `new` keyword is purposely not supported for JS Symbols.", "qid":"6006"},
      {"title":"`const s = Symbol.add('Sym1')` which adds a new Symbol to the global registry.", "qid":"6007", "topics":["syntax"]},
      {"title":"`const s = Symbol.create('Sym1')` which creates a new Symbol", "qid":"6008", "topics":["syntax"]}
    ],
    "actual":"6006",
    "category":"quiz",
    "criterion":"instantiation",
    "type":"radio"
  },
  "symbol_3":{
    "title":"Given: `const s = Symbol('hello')`\n  \n How would you access the Symbols descriptive string 'hello'?",
    "labels":[
      {"title":"`Symbol.get('description')`", "qid":"6009", "topics":["syntax"]},
      {"title":"`s.description`", "qid":"6010"},
      {"title":"`s.description()`", "qid":"6011", "topics":["syntax"]}
    ],
    "actual":"6010",
    "category":"quiz",
    "criterion":"description",
    "type":"radio"
  },
  "promise_1":{
    "title":"Which of the below is an example of a working Promise?",
    "labels":[
      {"title":"`let p = new Promise((resolve, reject) => resolve(10) )`", "qid":"7000"},
      {"title":"`let p = new Promise(resolve(10))`", "qid":"7001", "topics":["syntax"]},
      {"title":"`let p = new Promise(() => return 10 )`", "qid":"7002", "topics":["syntax"]}
    ],
    "actual":"7000",
    "category":"quiz",
    "criterion":"create",
    "type":"radio"
  },
  "promise_2":{
    "title":"Given: `let p = new Promise((resolve, reject) => resolve(10) )`\n  \n How would you set up chaining to return `30`?",
    "labels":[
      {"title":"`p(result => result * 3);`", "qid":"7003", "topics":["syntax"]},
      {"title":"`p.then(result => result * 3);`", "qid":"7004"},
      {"title":"`p.resolve(result => result * 3)`", "qid":"7005", "topics":["syntax"]}
    ],
    "actual":"7004",
    "category":"quiz",
    "criterion":"then",
    "type":"radio"
  },
  "promise_3":{
    "title":"Given: `let p1 = new Promise(resolve => resolve(10));`\n  \n `let p2 = new Promise(resolve => resolve(20));`\n  \n Use `Promise.all` to show the results.",
    "labels":[
      {"title":"`Promise.all(p1, p2).then(results => console.log(results))`", "qid":"7006", "topics":["syntax"]},
      {"title":"`Promise.all(p1, p2){results => console.log(results)}`", "qid":"7007", "topics":["syntax"]},
      {"title":"`Promise.all([p1, p2]).then(results => console.log(results))`", "qid":"7008"}
    ],
    "actual":"7008",
    "category":"quiz",
    "criterion":"all",
    "type":"radio"
  },
  "promise_4":{
    "title":"Given: `let p1 = new Promise(resolve => resolve(10));`\n  \n `let p2 = new Promise((resolve, reject) => reject('Error!'));`\n  \n What will `Promise.all([p1, p2]).then(result => console.log(result)).catch(err=>console.log(err))` return?",
    "labels":[
      {"title":"`10` and then `Error!` because the first promise resolves and then the second promise rejects.", "qid":"7009", "topics":["syntax"]},
      {"title":"`Error!` because the `all()` return promise is rejected if any of it's input promises are rejected.", "qid":"7010", "topics":["syntax"]},
      {"title":"`10` because the first promise returns first.", "qid":"7011"}
    ],
    "actual":"7010",
    "category":"quiz",
    "criterion":"all",
    "type":"radio"
  },
  "object_literal_1":{
    "title":"Given: `let x = 1;`\n  \n `let y = { z: 2, x };` \n  \n What will `console.log(y)` output?",
    "labels":[
      {"title":"`Syntax Error` because the `x` property is not assigned a value.", "qid":"8000"},
      {"title":"`{z:2, x:1}`", "qid":"8001"},
      {"title":"`{z:2}` because `x` will be ignored since it is not given a value.", "qid":"8002"}
    ],
    "actual":"8001",
    "category":"quiz",
    "criterion":"property shorthand",
    "type":"radio"
  },
  "object_literal_2":{
    "title":"Given `let prefix = 'last'`\n  \nHow might you create the computed object property name 'last name' on an object named 'person'?",
    "labels":[
      {"title":"`let person = {[prefix+' name']:'john'}`", "qid":"8003"},
      {"title":"`let person = {[prefix+' name']='john'}`", "qid":"8004", "topics":["syntax_language_feature"]},
      {"title":"`let person = {prefix + ' name':'john'}`", "qid":"8005", "topics":["syntax_language_feature"]}
    ],
    "actual":"8003",
    "category":"quiz",
    "criterion":"computed property name",
    "type":"radio"
  },
  "object_literal_3":{
    "title":"Given: \n  \n`let x = {`\n  \n&emsp;`restart: function() {`\n  \n&emsp;`console.log('restarting...');`\n  \n `}};`\n  \n How can you more concisely define the 'restart' method?",
    "labels":[
      {"title":"It is not possible to be more concise", "qid":"8006"},
      {"title":"`{`\n  \n&emsp;`restart() => console.log('restarting...');`\n  \n`}`", "qid":"8007", "topics":["syntax_language_feature"]},
      {"title":"`{`\n  \n&emsp;`restart() {`\n  \n&emsp;`console.log('restarting...');`\n  \n&emsp;`}`\n  \n `};`", "qid":"8008"}
    ],
    "actual":"8008",
    "category":"quiz",
    "criterion":"concise method syntax",
    "type":"radio"
  },
  "rest_parameters_1":{
    "title":"Given: \n  \n `function fn(a, b, ...args) {`\n  \n&emsp;`console.log(args)`\n  \n }\n  \n What will `fn(1,2,3,4)` log?",
    "labels":[
      {"title":"`undefined` because the syntax is incorrect.", "qid":"9000", "topics":["intent_language_feature"]},
      {"title":"`3` because it is the third argument.", "qid":"9001", "topics":["intent_language_feature"]},
      {"title":"`[3, 4]` because these are the rest of the paramters.", "qid":"9002"},
      {"title":"`3, 4` because these are the rest of the paramters.", "qid":"9003"}
    ],
    "actual":"9002",
    "category":"quiz",
    "criterion":"syntax",
    "type":"radio"
  },
  "rest_parameters_2":{
    "title":"Given: \n  \n `function fn(a, b, ...args) {`\n  \n&emsp;`return args`\n  \n }\n  \n What will `fn(1,2)` return?",
    "labels":[
      {"title":"`undefined` because there are only two arguments so undefined is returned.", "qid":"9004", "topics":["operation_langauge_feature"]},
      {"title":"`[]` because there are only two arguments so an empty array is returned.", "qid":"9005"},
      {"title":"A syntax error is thrown because not enough arguments are supplied.", "qid":"9006", "topics":["operation_langauge_feature"]},
      {"title":"An iterator is returned which can be used to get the arguments.", "qid":"9007", "topics":["return_langauge_feature"]}
    ],
    "actual":"9005",
    "category":"quiz",
    "criterion":"syntax",
    "type":"radio"
  },
  "rest_parameters_3":{
    "title":"Given: \n  \n `function fn(a, ...args, b) {`\n  \n&emsp;`return args`\n  \n }\n  \n What will `fn(1,2)` return?",
    "labels":[
      {"title":"`2` because it is the second argument.", "qid":"9008", "topics":["syntax_language_feature"]},
      {"title":"`[2]` because it is the second argument.", "qid":"9009", "topics":["syntax_language_feature"]},
      {"title":"`Uncaught SyntaxError: Rest parameter must be last formal parameter`", "qid":"9010"}
    ],
    "actual":"9010",
    "category":"quiz",
    "criterion":"syntax",
    "type":"radio"
  },
  "rest_parameters_4":{
    "title":"Given: \n  \n `function fn(a, ...b, ...c) {`\n  \n&emsp;`return c`\n  \n }\n  \n What will `fn(1,2,3,4)` return?",
    "labels":[
      {"title":"`Uncaught SyntaxError: Rest parameter must be last formal parameter`", "qid":"9011"},
      {"title":"`[3, 4]` because these are the rest of the paramters not assigned to previous arguments.", "qid":"9012", "topics":["syntax_language_feature"]},
      {"title":"`[]` because the rest params `[2,3,4]` are assigned to `b`", "qid":"9013", "topics":["syntax_language_feature"]}
    ],
    "actual":"9011",
    "category":"quiz",
    "criterion":"syntax",
    "type":"radio"
  },
  "rest_parameters_5":{
    "title":"Given: \n  \n `function fn(a, b, ...[c,d]) {`\n  \n&emsp;`return [c,d]`\n  \n }\n  \n What will `fn(1,2,3,4,5,6)` return?",
    "labels":[
      {"title":"`[3, 4, 5, 6]` because the rest params are assinged to c and d.", "qid":"9014"},
      {"title":"`[3, 4]` because the rest params are destructured and the 3rd and 4th items are assigned to c, d respectively.", "qid":"9015"},
      {"title":"An `Uncaught SyntaxError` is thrown because inline destructuring of params is not supported.", "qid":"9016"}
    ],
    "actual":"9015",
    "category":"quiz",
    "criterion":"destructuring",
    "type":"radio"
  },
  "rest_parameters_6":{
    "title":"What is the difference between the function `arguments` property and 'rest parameters'?",
    "labels":[
      {"title":"The `arguments` prop is array like' while 'rest parameters' are in a true array which means Array methods can be applied directly.", "qid":"9017"},
      {"title":"The `arguments` object has additional functionality specific to itself (like the callee property).", "qid":"9018"},
      {"title":"The `...restParam` bundles all the extra parameters into a single array, whereas the arguments object contains all of the parameters.", "qid":"9019"},
      {"title":"All of the above.", "qid":"9020"},
      {"title":"None of the above.", "qid":"9021"}
    ],
    "actual":"9020",
    "category":"quiz",
    "criterion":"",
    "type":"radio"
  },
  "spread_1":{
    "title":"`const odd = [1,3,5];`\n  \nWhat is the output of `console.log([2,4,6, ...odd]);`",
    "labels":[
      {"title":"`[2, 4, 6, 1, 3, 5]` because `const odd` is 'spread' into the new array.", "qid":"9000"},
      {"title":"`[2, 4, 6, [1, 3, 5]]` because `const odd` is added to the new array.", "qid":"9001"},
      {"title":"An `Uncaught SyntaxError` is thrown because 'spreading' inside an array is not supported.", "qid":"9002"}
    ],
    "actual":"9000",
    "category":"quiz",
    "criterion":"syntax",
    "type":"radio"
  },
  "spread_2":{
    "title":"`const odd = [1,3,5];`\n  \nWhat is the output of `console.log([2,4,6, ...odd, 7,8]);`",
    "labels":[
      {"title":"`[2, 4, 6, [1, 3, 5], 7, 8]` because `const odd` is added to the new array.", "qid":"9003"},
      {"title":"`[2, 4, 6, 1, 3, 5, 7, 8]` because `const odd` is 'spread' into the new array.", "qid":"9004"},
      {"title":"`Uncaught SyntaxError: Spread operator must be last formal parameter`", "qid":"9005"}
    ],
    "actual":"9004",
    "category":"quiz",
    "criterion":"syntax",
    "type":"radio"
  },
  "spread_3":{
    "title":"Given:\n  \n`let scores = [80, 70, 90];`\n  \n`let copiedScores = [...scores];`\n  \n`scores.pop()`\n  \nWhat is value of copiedScores?",
    "labels":[
      {"title":"`[80, 70, 90]` because copying took place by cloning, updating `scores` has no impact on `copiedScores`", "qid":"9006"},
      {"title":"`[80, 70]` because copying took place by reference.", "qid":"9007", "topics":["cloning"]},
      {"title":"`[80, 70, 90]` because `pop()` does not mutate the original array.", "qid":"9008", "topics":["cloning"]}
    ],
    "actual":"9006",
    "category":"quiz",
    "criterion":"syntax",
    "type":"radio"
  },
  "spread_4":{
    "title":"Given:\n  \n`let x = [80, 70, 90];`\n  \n `function sum(a, b, c){ return a + b + c }`\n  \nWhat's the most succint way to invoke `sum()` successfully.",
    "labels":[
      {"title":"`sum.apply(null, x);` by using the function object's apply method.", "qid":"9009", "topics":["complicated"]},
      {"title":"`sum(...x)` with the use of the spread operator.", "qid":"9010"},
      {"title":"`sum(x)` by directly passing the array.", "qid":"9011"}
    ],
    "actual":"9010",
    "category":"quiz",
    "criterion":"syntax",
    "type":"radio"
  },
  "destructuring_1":{
    "title":"Given:\n  \n`function getNumbers() {`\n  \n&emsp;`return [10, 20];`\n  \n`}`\n  \n`let [x, y, z] = getNumbers();`\n  \nWhat are the values of `x` and `z` respectively?",
    "labels":[
      {"title":"`10` and `20`", "qid":"9500", "next":"destructuring_2"},
      {"title":"`10` and `undefined`", "qid":"9501"},
      {"title":"`Error Array out of bounds`", "qid":"9502"},
      {"title":"`10` and `-1`", "qid":"9503", "next":"destructuring_2"}
    ],
    "actual":"9501",
    "category":"quiz",
    "criterion":"return",
    "type":"radio"
  },
  "destructuring_2":{
    "title":"Given:\n  \n`function getNumbers() {`\n  \n&emsp;`return [10, 20, 30, 40, 50, 60];`\n  \n`}`\n  \n`let [x, y, z] = getNumbers();`\n  \nWhat are the values of `x`, `y` and `z` respectively?",
    "labels":[
      {"title":"`10`, `20` and `30`", "qid":"9504"},
      {"title":"`10`, `20` and `[30, 40, 50, 60]`", "qid":"9505"},
      {"title":"`40`, `50`, `60`", "qid":"9506"}
    ],
    "actual":"9504",
    "category":"quiz",
    "criterion":"return",
    "type":"radio"
  },
  "destructuring_3":{
    "title":"Given:\n  \n`function getNumbers() {`\n  \n&emsp;`return [10, 20, 30, 40, 50, 60];`\n  \n`}`\n  \n`let [x, y, ...z] = getNumbers();`\n  \nWhat are the values of `x`, `y` and `z` respectively?",
    "labels":[
      {"title":"`10`, `20` and `30`", "qid":"9506"},
      {"title":"`10`, `20` and `[30, 40, 50, 60]`", "qid":"9507"},
      {"title":"`40`, `50`, `60`", "qid":"9508"}
    ],
    "actual":"9507",
    "category":"quiz",
    "criterion":"rest syntax",
    "type":"radio"
  },
  "destructuring_4":{
    "title":"Given:\n  \n`function getNumbers() {`\n  \n&emsp;`return [10, 20];`\n  \n`}`\n  \n`let [, , z=0] = getNumbers();`\n  \nWhat is the value `z`?",
    "labels":[
      {"title":"`10`", "qid":"9509"},
      {"title":"`20`", "qid":"9510"},
      {"title":"`0`", "qid":"9511"}
    ],
    "actual":"9511",
    "category":"quiz",
    "criterion":"default",
    "type":"radio"
  },
  "destructuring_5":{
    "title":"Given:\n  \n`function getNumbers() {`\n  \n&emsp;`return [10, 20];`\n  \n`}`\n  \n`let [, , ...z] = getNumbers();`\n  \nWhat is the value `z`?",
    "labels":[
      {"title":"`10`", "qid":"9512"},
      {"title":"`[]`", "qid":"9513"},
      {"title":"`0`", "qid":"9514"}
    ],
    "actual":"9513",
    "category":"quiz",
    "criterion":"rest syntax",
    "type":"radio"
  },
  "destructuring_6":{
    "title":"Given:\n  \n`function getNumbers() {`\n  \n&emsp;`return [10, 20, [30, 40]];`\n  \n`}`\n  \nHow to assign each value to it's own variable?",
    "labels":[
      {"title":"`let [a, b, c, d] = getNumbers();`", "qid":"9515"},
      {"title":"`let [a, b, [c, d]] = getNumbers();`", "qid":"9516"},
      {"title":"`let a, b [c, d] = getNumbers();`", "qid":"9517"}
    ],
    "actual":"9516",
    "category":"quiz",
    "criterion":"nested",
    "type":"radio"
  },
  "destructuring_7":{
    "title":"Given:\n  \n`let a = 1;`\n  \n`let b = 2;`\n  \n`[a, b] = [b, a];`\n  \nWhat are the values of `a` and `b` respectively?",
    "labels":[
      {"title":"`1` and `2`", "qid":"9518"},
      {"title":"`2` and `1`", "qid":"9519"},
      {"title":"`both are undefined`", "qid":"9520"}
    ],
    "actual":"9519",
    "category":"quiz",
    "criterion":"swapping values",
    "type":"radio"
  },
  "destructuring_8":{
    "title":"Given:\n  \n`let {a, b} = {a: 1, b: 2};`\n  \nWhat are the values of the `a` and `b` variables?",
    "labels":[
      {"title":"`1` and `2`", "qid":"9521"},
      {"title":"`2` and `1`", "qid":"9522"},
      {"title":"both are undefined", "qid":"9523"}
    ],
    "actual":"9521",
    "category":"quiz",
    "criterion":"object literal syntax",
    "type":"radio"
  },
  "destructuring_9":{
    "title":"Given:\n  \n`let {a:c, b:d} = {a: 1, b: 2};`\n  \nWhat are the values of the `a`, `c` and `d` variables?",
    "labels":[
      {"title":"`1` and `2`", "qid":"9524"},
      {"title":"`2` and `1`", "qid":"9525"},
      {"title":"`Uncaught ReferenceError: a is not defined` is thrown.", "qid":"9526"}
    ],
    "actual":"9526",
    "category":"quiz",
    "criterion":"new variable names",
    "type":"radio"
  },
  "destructuring_10":{
    "title":"Given:\n  \n`let {a:c=3, b:d=4} = { a: 1 };`\n  \nWhat are the values of the `c` and `d` variables?",
    "labels":[
      {"title":"`1` and `4`", "qid":"9527"},
      {"title":"`3` and `4`", "qid":"9528"},
      {"title":"`1` and `undefined`", "qid":"9529"}
    ],
    "actual":"9527",
    "category":"quiz",
    "criterion":"default values",
    "type":"radio"
  },
  "destructuring_11":{
    "title":"Given:\n  \n``\n  \n``\n  \n``\n  \nWhat ?",
    "labels":[
      {"title":"`1` and `2`", "qid":"9530"},
      {"title":"`2` and `1`", "qid":"9531"},
      {"title":"`0`", "qid":"9532"}
    ],
    "actual":"9500",
    "category":"quiz",
    "criterion":"combined array and object",
    "type":"radio"
  },
  "quiz_results":{
    "title":"JS Quiz Summary",
    "type":"summary",
    "qid":"10000"
  }

}
