{
  "array_1":{
    "title":"What is the correct `concat()` syntax to combine:  \n  \n`const a = ['d', 'e', 'c'];`  \n`const b = ['d', 'e', 'f'];`",
    "labels":[
      {"title":"`const c = concat(a,b)`", "qid":"1001"},
      {"title":"`const c = a.concat(b)`", "qid":"1002"},
      {"title":"`const c = Array.concat(a,b)`", "qid":"1003"},
      {"title":"None of the above", "qid":"1000", "next":"array_31"}
    ],
    "actual":"1002",
    "category":"quiz",
    "criterion":"concat",
    "type":"radio"
  },
  "array_2":{
    "title":"What is the expected value of c:  \n  \n`const a = ['d', 'e', 'c'];`  \n`const b = ['d', 'e', 'f'];`  \n`const c = a.concat(b);`",
    "labels":[
      {"title":"No output. the const a array is changed in place.", "qid":"1004"},
      {"title":"`['d', 'e', 'c','f']`", "qid":"1005"},
      {"title":"`['d', 'e', 'c', 'd', 'e', 'f']`", "qid":"111"},
      {"title":"None of the above - the syntax isn't used correctly.", "qid":"1007"}
    ],
    "actual":"1006",
    "category":"quiz",
    "criterion":"concat",
    "type":"radio"
  },
  "array_3":{
    "title":"What is the final value of `numbers`?   \n  \n`const num1 = [[1]];`  \n`const num2 = [2, [3]];`  \n`const numbers = num1.concat(num2);`  \n`num1[0].push(4);`",
    "labels":[
      {"title":"`[4, [1], 2, [3]]`", "qid":"1008"},
      {"title":"`[[1], 2, [3]]`", "qid":"1009"},
      {"title":"`[[1, 4], 2, [3]]`", "qid":"1010"},
      {"title":"`[[4], 2, [3]]`", "qid":"1011"}
    ],
    "actual":"1010",
    "category":"quiz",
    "criterion":"concat",
    "type":"radio"
  },
  "array_4":{
    "title":"Which is a valid way to test whether all elements in the array are less than 10?  \n  \n`const a = [1,2,3,4,5]`",
    "labels":[
      {"title":"`Array.every(a, x => x < 10)`", "qid":"1012"},
      {"title":"`a.every(x => x < 10)`", "qid":"1013"},
      {"title":"`a.filter(x => x < 10)`", "qid":"1014"},
      {"title":"`a.includes(x => x < 10)`", "qid":"1015"}
    ],
    "actual":"1013",
    "category":"quiz",
    "criterion":"every",
    "type":"radio"
  },
  "array_5":{
    "title":"Which of the below is a valid way to find words greater than 6 characters?  \n  \n`const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];`",
    "labels":[
      {"title":"`words.filter(x => x.length > 6)`", "qid":"1016"},
      {"title":"`const a = words.filter(word => word > 6)`", "qid":"1017"},
      {"title":"`words.find( word => word.length > 6)`", "qid":"1018"},
      {"title":"`const a = words.filter(x => x.length > 6)`", "qid":"1019"}
    ],
    "actual":"1019",
    "category":"quiz",
    "criterion":"filter",
    "type":"radio"
  },
  "array_6":{
    "title":"How to best get the first item greater than 10 in  \n  \n`const a = [5, 12, 8, 130, 44];`",
    "labels":[
      {"title":"`const b = a.find(x => x > 10)`", "qid":"1020"},
      {"title":"`const b = a.filter(x => x > 10)[0]`", "qid":"1021"},
      {"title":"`const b = a.findIndex(x => x > 10)`  \n  \n`const c = a[b]`", "qid":"1022"},
      {"title":"`const b = a.indexOf(x => x > 10)`", "qid":"1023"}
    ],
    "actual":"1020",
    "category":"quiz",
    "criterion":"find",
    "type":"radio"
  },
  "array_7":{
    "title":"What is the return value of  \n  \n`const a = [1, 5, 4, 8, 3]`  \n`a.findIndex(x => x > 10)`",
    "labels":[
      {"title":"`undefined` because `findIndex()` doesn't use a testing function.", "qid":"1024"},
      {"title":"`[]` because no match is found and a new, empty array is returned instead of modifying the original.", "qid":"1025"},
      {"title":"`-1` because no matching index was found.", "qid":"1026"},
      {"title":"`null`", "qid":"1027"}
    ],
    "actual":"1026",
    "category":"quiz",
    "criterion":"findIndex",
    "type":"radio"
  },
  "array_8":{
    "title":"What's the best way to get the index of the first item greater than 10 in  \n  \n`const a = [5, 12, 8, 130, 44];`",
    "labels":[
      {"title":"`const b = a.findIndex(x => x > 10)`  \n  \n`const c = a[b]`", "qid":"1022"},
      {"title":"`const b = a.indexOf(x => x > 10)`", "qid":"1023"},
      {"title":"`const b = a.findIndex(x => x > 10)`", "qid":"1028"},
      {"title":"`const b = a.find(x => x > 10)`", "qid":"1020"}
    ],
    "actual":"1028",
    "category":"quiz",
    "criterion":"findIndex",
    "type":"radio"
  },
  "array_9":{
    "title":"What's the output of  \n`const a = [1, 2, [3, 4, [5, 6]]].flat();`",
    "labels":[
      {"title":"`[1, 2, 3, 4, 5, 6]` because all nested arrays are brought to the same level", "qid":"1029"},
      {"title":"`Uncaught TypeError` because it is not an array method.", "qid":"1030"},
      {"title":"`[1, 2, 3, 4, [5], [6]]` because flat() only de-nests 1 level at a time.", "qid":"1031"},
      {"title":"`[1, 2, 3, 4, [5, 6]]` because flat() only de-nests 1 level at a time.", "qid":"1032"}
    ],
    "actual":"1032",
    "category":"quiz",
    "criterion":"flat",
    "type":"radio"
  },
  "array_10":{
    "title":"What is the best method to execute a function once for each item in an array?",
    "labels":[
      {"title":"`forEach()`", "qid":"1033"},
      {"title":"`map()`", "qid":"1034"},
      {"title":"`reduce()`", "qid":"1035"},
      {"title":"`filter()`", "qid":"1036"}
    ],
    "actual":"1033",
    "category":"quiz",
    "criterion":"forEach",
    "type":"radio"
  },
  "array_11":{
    "title":"What is the expected value of `a` ?  \n  \n`var a = [1, 2, 3, 4].forEach(x => x+1).join('-');`",
    "labels":[
      {"title":"The string `2-3-4-5` because `forEach()` increments the array values.", "qid":"1037"},
      {"title":"The string `1-2-3-4` because `forEach()` doesn't change the original array.", "qid":"1038"},
      {"title":"`Uncaught TypeError` because the `forEach()` method is not chainable.", "qid":"1039"},
      {"title":"None of the above", "qid":"1000"}
    ],
    "actual":"1039",
    "category":"quiz",
    "criterion":"forEach",
    "type":"radio"
  },
  "array_12":{
    "title":"Given `a = [1, 2, 3];`  \n  \nWhat's the best way to verify `3` is located at the last index of `a`",
    "labels":[
      {"title":"`a.includes(3, 3)` because it searches for `3` from the 3rd index.", "qid":"1040"},
      {"title":"`a.includes(3, -1)` because it searches for `3` from the last index.", "qid":"1041"},
      {"title":"`a.findIndex(a => a === 3) === 2` because this returns a boolean.", "qid":"1042"},
      {"title":"`var b = a.indexOf(3) === 2;` because `b` will evaluate to `true` or `false`", "qid":"1042"}
    ],
    "actual":"1041",
    "category":"quiz",
    "criterion":"includes",
    "type":"radio"
  },
  "array_13":{
    "title":"What's the expected console output for:  \n  \n`(function() {`  \n&emsp;`console.log(Array.prototype.includes.call(arguments, 'a'))`  \n`})('a','b','c')`",
    "labels":[
      {"title":"`Uncaught TypeError` because the `includes()` method can only be applied to arrays.", "qid":"1043"},
      {"title":"`true` because the `includes()` method is generic and can be applied to 'array-like' objects such as `arguments`", "qid":"1044"},
      {"title":"nothing... the function is never invoked.", "qid":"1045"},
      {"title":"`'a'` because the argument value is returned.", "qid":"1046"}
    ],
    "actual":"1044",
    "category":"quiz",
    "criterion":"includes",
    "type":"radio"
  },
  "array_14":{
    "title":"Whats the most concise way to check if a `2` exists at the last index of:  \n  \n`const a = [1, 2, 2, 2]`",
    "labels":[
      {"title":"`a.indexOf(2)` because the method always searches the entire array.", "qid":"1047"},
      {"title":"`a.findIndex(2, -1)`", "qid":"1048"},
      {"title":"`a.indexOf(2, a.length)` because this will start a search at the end of the array.", "qid":"1049"},
      {"title":"`a.indexOf(2, -1)` because this will start a search from the end of the array.", "qid":"1050"}
    ],
    "actual":"1050",
    "category":"quiz",
    "criterion":"indexOf",
    "type":"radio"
  },
  "array_15":{
    "title":"What's the expected outcome of `[1, 2, 2, 2].join().split(2)`",
    "labels":[
      {"title":"`['1,', ',', ',', '']` because `join()` introduces comma string's and `split` removes the 2's", "qid":"1051"},
      {"title":"`Uncaught TypeError` because `join()` is not chainable.", "qid":"1052"},
      {"title":"`['1', '', '', '']` because `split()` breaks the string apart on the 2 values", "qid":"1053"},
      {"title":"`[1]` because the 2's end up being removed.", "qid":"1054"}
    ],
    "actual":"1051",
    "category":"quiz",
    "criterion":"join",
    "type":"radio"
  },
  "array_16":{
    "title":"What value will `['cat','dog','bird'].keys()` return?",
    "labels":[
      {"title":"`[0, 1, 2]`", "qid":"1055"},
      {"title":"`['cat','dog','bird']`", "qid":"1056"},
      {"title":"A syntax error because the correct usage is `Array.keys(['cat','dog','bird'])`", "qid":"1057"},
      {"title":"An Array iterator which in turn can be used to get the individual keys.", "qid":"1058"}
    ],
    "actual":"1058",
    "category":"quiz",
    "criterion":"keys",
    "type":"radio"
  },
  "array_17":{
    "title":"What's the most concise way to get the position of the last item that is a `2` in `const a = [2, 5, 9, 2]`;",
    "labels":[
      {"title":"`a.findIndex(x => x === 2, -1)`", "qid":"1059"},
      {"title":"`a.indexOf(2, -1)`", "qid":"1060"},
      {"title":"`a.lastIndexOf(2, -1)` because the second arg triggers a search from the end of an array.", "qid":"1061"},
      {"title":"`a.lastIndexOf(2)` because `lastIndexOf` automatically starts at the array's end.", "qid":"1062"}
    ],
    "actual":"1062",
    "category":"quiz",
    "criterion":"lastIndexOf",
    "type":"radio"
  },
  "array_18":{
    "title":"When should you *not* use the array's `map()` method?",
    "labels":[
      {"title":"You're not using the array it returns.", "qid":"1063"},
      {"title":"You're not returning a value from it's callback argument.", "qid":"1064"},
      {"title":"You need to change an array in place.", "qid":"1065"},
      {"title":"All of the above options.", "qid":"1066"}
    ],
    "actual":"1066",
    "category":"quiz",
    "criterion":"map",
    "type":"radio"
  },
  "array_19":{
    "title":"What is the expected output of  \n  \n`[1, 4, 9, 16].map(x => x * 2);`",
    "labels":[
      {"title":" an error because `map()` is an Object method not an Array method.", "qid":"1067"},
      {"title":"`undefined` because `map()` doesn't return anything it updates an array in place.", "qid":"1068"},
      {"title":"`[1, 4, 9, 16]` because `map()` always returns a copy of the original array.", "qid":"1069"},
      {"title":"`[2, 8, 18, 32]` because `map()` returns a new array after operating on each item.", "qid":"1070"}
    ],
    "actual":"1070",
    "category":"quiz",
    "criterion":"map",
    "type":"radio"
  },
  "array_20":{
    "title":"How can you use `map()` to change the string 'foo' into the array `['f_','o_','o_']`",
    "labels":[
      {"title":"`Array.prototype.map.call('foo', l => l+'_')`", "qid":"1071"},
      {"title":"`'foo'.map(l => l+'_')`", "qid":"1072"},
      {"title":"`Array.map('foo', l => l+'_')`", "qid":"1073"},
      {"title":"`'foo'.prototype.map.call([],  l => l+'_')`", "qid":"1074"}
    ],
    "actual":"1071",
    "category":"quiz",
    "criterion":"map",
    "type":"radio"
  },
  "array_21":{
    "title":"Given `const a = [1,2,3,4];`  \n  \nand `const b = a.pop()`  \n  \nWhat are the values of `a` and `b`",
    "labels":[
      {"title":"`a = [1,2,3]; b = 4;` because `pop()` mutates the array and returns last item.", "qid":"1075"},
      {"title":"`a = [1,2,3,4]; b = [4];` because `pop()` returns a new array with the last last item.", "qid":"1076"},
      {"title":"`a = [1,2,3,4]; b = 1;` because `pop()` returns the first item.", "qid":"1077"},
      {"title":"`a = [2,3,4]; b = 1;` because `pop()` mutates the array and returns first item.", "qid":"1078"}
    ],
    "actual":"1075",
    "category":"quiz",
    "criterion":"pop",
    "type":"radio"
  },
  "array_22":{
    "title":"Given `const a = [1,2,3,4].push(5)`  \n  \nWhat is the value of `a`?",
    "labels":[
      {"title":"`5` because `push()` returns the new length of the array.", "qid":"1079"},
      {"title":"`5` because `push()` returns val of the new item(s) added to the array", "qid":"1080"},
      {"title":"`[1,2,3,4,5]` because `push` doesnt mutate the original array - it returns a new array after the item(s) have been added to the end.", "qid":"1081"},
      {"title":"`[5,1,2,3,4]` because `push` doesnt mutate the original array - it returns a new array after the item(s) have been added to the beginning.", "qid":"1082"}
    ],
    "actual":"1000",
    "category":"quiz",
    "criterion":"",
    "type":"radio"
  },
  "array_23":{
    "title":"Given `const a = [1,2,3,4];`  \n  \n`a.push(5)`  \n  \nWhat is the value of `a`?",
    "labels":[
      {"title":"`[1,2,3,4,,]` because `push()` adds a value and a given index and no value was specified.", "qid":"1083"},
      {"title":"`[1,2,3,4]` because `push()` doesn't mutate the original array.", "qid":"1084"},
      {"title":"`[1,2,3,4,5]` because `push()` adds items to the *end* of an array.", "qid":"1085"},
      {"title":"`[5,1,2,3,4]` because `push()` adds items to the *beginning* of an array.", "qid":"1086"}
    ],
    "actual":"1085",
    "category":"quiz",
    "criterion":"push",
    "type":"radio"
  },
  "array_24":{
    "title":"Which of the following methods mutate the array on which they are called?",
    "labels":[
      {"title":"push, pop, reduce, filter, map", "qid":"1087"},
      {"title":"push, pop, shift, unshift", "qid":"1088"},
      {"title":"push, pop, shift, unshift, slice, reverse", "qid":"1089"},
      {"title":"push, pop, shift, unshift, reverse, sort, splice", "qid":"1090"}
    ],
    "actual":"1090",
    "category":"quiz",
    "criterion":"array mutation",
    "type":"radio"
  },
  "array_25":{
    "title":"Given `const a = [1, 2, 3, 4];`  \n  \n`const b = a.shift()`  \n  \nWhat are the values of `a` and `b`?",
    "labels":[
      {"title":"`1` and `[2, 3, 4]` because `shift()` mutates the array by removing the first element.", "qid":"1091"},
      {"title":"`1` and `[1, 2, 3, 4]` because shift does *not* mutate the original array.", "qid":"1092"},
      {"title":"`4` and `[1, 2, 3]` because `shift()` mutates the array and removes the last element.", "qid":"1093"},
      {"title":"`4` and `[1, 2, 3, 4]` because shift does *not* mutate the original array and removes the last elmeent.", "qid":"1094"}
    ],
    "actual":"1094",
    "category":"quiz",
    "criterion":"shift",
    "type":"radio"
  },
  "array_26":{
    "title":"What's the expected value of `b` given `const a = ['a', 'b', 'c', 'd']`;  \n  \n `const b = a.slice(2)`",
    "labels":[
      {"title":"`['c','d']` because `slice()` returns a copy from index `2` to the end of the array.", "qid":"1095"},
      {"title":"`['c']` because `slice()` returns a copy of the array at index `2`", "qid":"1096"},
      {"title":"`['a','b']` because `slice()` returns a copy of the array up to index `2`", "qid":"1097"},
      {"title":"`['a','b','c']` because `slice()` returns a copy of the array up to and including index `2`", "qid":"1098"}
    ],
    "actual":"1095",
    "category":"quiz",
    "criterion":"slice",
    "type":"radio"
  },
  "array_27":{
    "title":"Whats the expected value of `b` given `const a = ['a', 'b', 'c', 'd'];`  \n  \n const b = a.slice(1,3)`",
    "labels":[
      {"title":"`['b','c']` because `slice()` returns a copy of the array between index `1` and the endpoint `3`. The endpoint is not included.", "qid":"1099"},
      {"title":"`['b','c','d']` because `slice()` returns a copy of the array between indexes `1`, `2`, and `3`", "qid":"1100"},
      {"title":"`['b','d']` because `slice()` returns an array copy containing item from the original array at indexes `1` and `3`", "qid":"1101"},
      {"title":"`['a']` because `slice()` cuts members at indexes `1` though `3`. `'a'` at index 0 is all that's left.", "qid":"1102"}
    ],
    "actual":"1099",
    "category":"quiz",
    "criterion":"slice",
    "type":"radio"
  },
  "array_28":{
    "title":"Whats the expected value of `a` given `const a = ['a', 'b', 'c', 'd'];  \n  \n const b = a.slice(1,3)`",
    "labels":[
      {"title":"`['a','d']` because `slice()` cuts the elements at indexes `1` and `2`", "qid":"1103"},
      {"title":"`['a']` because `slice()` cuts the items at indexes `1` through `3`", "qid":"1104"},
      {"title":"`['a', 'b', 'c', 'd']` because `slice()` does *not* mutate the original array.", "qid":"1105"},
      {"title":"`['b','c']` because `slice()` returns a copy of the array between index `1` and the endpoint `3`. The endpoint is not included.", "qid":"1099"}
    ],
    "actual":"1105",
    "category":"quiz",
    "criterion":"slice",
    "type":"radio"
  },
  "array_29":{
    "title":"'Changes an array by removing or replacing existing elements and/or adding new elements in place.' best describes which method?",
    "labels":[
      {"title":"`slice()`", "qid":"1106"},
      {"title":"`splice()`", "qid":"1107"},
      {"title":"`shift()`", "qid":"1108"},
      {"title":"`unshift()`", "qid":"1109"}
    ],
    "actual":"1107",
    "category":"quiz",
    "criterion":"splice",
    "type":"radio"
  },
  "array_30":{
    "title":"What is the value of consts `fish` and `a` given: `const fish = ['angel', 'clown', 'mandarin', 'sturgeon'];`  \n`const x = fish.splice(1, 0, 'tilapia')`",
    "labels":[
      {"title":"`['angel', 'clown', 'mandarin', 'sturgeon']` and `[]` because no items were added or removed.", "qid":"1110"},
      {"title":"`[tilapia', 'clown', 'mandarin', 'sturgeon']` and `['angel']` because 1 item removed and replaced at the 0 index with the value 'tilapia'", "qid":"1111"},
      {"title":"", "qid":"1112"},
      {"title":"`['angel', 'tilapia', 'clown', 'mandarin', 'sturgeon']` and `[]` because `splice()` inserted at the first index, removed 0 items and used 'tilapia' as the insert value. No items were removed so the return value is an empty array.", "qid":"1113"}
    ],
    "actual":"1113",
    "category":"quiz",
    "criterion":"splice",
    "type":"radio"
  },
  "array_31":{
    "title":"What is the value of const `fish` given: `const fish = ['angel', 'clown', 'mandarin', 'sturgeon'];`  \n`const x = fish.splice(1)`",
    "labels":[
      {"title":"`['angel', ,'clown', 'mandarin', 'sturgeon']` an empty value is inserted at index `1` because no value was specified.", "qid":"1114"},
      {"title":"`['angel', 'mandarin', 'sturgeon']` because `splice()` used `1` as an index to delete an item.", "qid":"1115"},
      {"title":"This will result in an error because of missing required method arguments.", "qid":"1116"},
      {"title":"`['angel']` because `splice()` will delete everything from the start index of `1` since the second argument was not included.", "qid":"1117"}
    ],
    "actual":"1100",
    "category":"quiz",
    "criterion":"",
    "type":"radio"
  },
  "array_32":{
    "title":"",
    "labels":[
      {"title":"", "qid":"1100"},
      {"title":"", "qid":"1100"},
      {"title":"", "qid":"1100"},
      {"title":"", "qid":"1100"}
    ],
    "actual":"1100",
    "category":"quiz",
    "criterion":"",
    "type":"radio"
  },
  "quiz_results":{
    "title":"Quiz Summary",
    "type":"summary",
    "qid":"10000"
  }

}
